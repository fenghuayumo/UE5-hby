// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../CommonViewUniformBuffer.ush"
#include "../SceneTextureParameters.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShaderPrint.ush"
#include "../PositionReconstructionCommon.ush"
#include "HairStrandsVisibilityCommon.ush"
#include "HairStrandsAABBCommon.ush" 

////////////////////////////////////////////////////////////////////////////////////////////////

void AddNewLine(float2 OriginalPos, inout float2 Pos)
{
	Pos = ShaderPrintNewline(Pos); Pos.x = OriginalPos.x;
}

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_PRINT

#include "../SceneData.ush"

int2 PixelCoord;
int2 MaxResolution;
uint FastResolveMask;
uint HairMacroGroupCount;
uint2 GroupSize; 
uint HairVisibilityNodeGroupSize;
uint AllocatedSampleCount;
uint HairInstanceCount;

uint NumInstances;
uint InstanceDataSOAStride;

Buffer<uint> HairInstanceIDs;
Texture2D<float> HairCountTexture;
Texture2D<uint> HairCountUintTexture;

Texture2D<uint2> StencilTexture;
SamplerState LinearSampler;
Buffer<uint> HairVisibilityIndirectArgsBuffer;

Buffer<int> HairMacroGroupAABBBuffer;

#define MATERIAL_DATA 1
#define DETAIL_DATA 1

FFontColor GetOccupancyColor(float In)
{
	float3 Color = lerp(float3(0, 1, 0), float3(1, 0, 0), saturate(In));
	return InitFontColor(Color);
}

void DrawInstanceAABB(uint PrimitiveId)
{
	// Since we don't have the actual instance ID (they are transient instance vs. persistent instance), 
	// we find the primitive with the matching PrimitiveID
	uint InstanceID = ~0;
	const uint TotalInstanceCount = min(8192u, NumInstances);
	for (uint LocalInstanceID = 0; LocalInstanceID < TotalInstanceCount; ++LocalInstanceID)
	{
		FInstanceSceneData InstanceData = GetInstanceSceneData(LocalInstanceID, InstanceDataSOAStride);
		if (InstanceData.PrimitiveId == PrimitiveId)
		{
			InstanceID = LocalInstanceID;
			break;
		}
	}

	if (InstanceID != ~0)
	{
		FInstanceSceneData InstanceData = GetInstanceSceneData(InstanceID, InstanceDataSOAStride);
		const float4 InstanceBoundColor = ColorLightGreen;
		AddOBBWS(InstanceData.LocalBoundsCenter - InstanceData.LocalBoundsExtent, InstanceData.LocalBoundsCenter + InstanceData.LocalBoundsExtent, InstanceBoundColor, LWCHackToFloat(InstanceData.LocalToWorld));
		AddReferentialWS(LWCHackToFloat(InstanceData.LocalToWorld), 50.f);
	}
}

[numthreads(1, 1, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{	
	// Draw AABB of the instance groups
	if (all(DispatchThreadId == 0))
	{
		// Macro groups bounds
		for (uint GroupIndex =0;GroupIndex< HairMacroGroupCount; GroupIndex++)
		{
			const float4 InstanceBoundColor = float4(1.f, 0.5f, 0.5f, 1.0f);
			FHairAABB Bound = ReadHairAABB(GroupIndex, HairMacroGroupAABBBuffer);
			AddAABBTWS(Bound.Min, Bound.Max, InstanceBoundColor);
		}

		// Hair instance bounds
		for (uint HairInstanceIndex = 0; HairInstanceIndex < HairInstanceCount; HairInstanceIndex++)
		{
			const uint InstanceID = HairInstanceIDs[HairInstanceIndex];
			if (InstanceID != ~0)
			{
				DrawInstanceAABB(InstanceID);
			}
		}

		const uint DispatchX = HairVisibilityIndirectArgsBuffer[0];
		const uint DispatchY = HairVisibilityIndirectArgsBuffer[1];
		const uint UsedSampleCount = HairStrands.HairSampleCount.Load(uint3(0, 0, 0));
		const uint DispatchedSampleCount = DispatchX * DispatchY * HairVisibilityNodeGroupSize;

		const uint2 EquivalentResolution = ceil(sqrt(UsedSampleCount));
	
		// Pixel coord
		float2 OriginalPos = float2(450, 50) / float2(MaxResolution);
		float2 Pos = OriginalPos;
		Pos = ShaderPrintText(Pos, TEXT("Sample Count (Used/Alloc)  "), FontCyan);
		Pos = ShaderPrint(Pos, UsedSampleCount, FontCyan);
		Pos = ShaderPrint(Pos, AllocatedSampleCount, FontCyan);

		const float AllocationPercentage = float(UsedSampleCount) / float(AllocatedSampleCount);
		const FFontColor OccupancyColor = GetOccupancyColor(AllocationPercentage);
		Pos = ShaderPrintText(Pos, TEXT(" %% "), OccupancyColor);
		Pos = ShaderPrint(Pos, AllocationPercentage * 100.f, OccupancyColor);

		AddNewLine(OriginalPos, Pos);

		Pos = ShaderPrintText(Pos, TEXT("Sample Lighting Resolution "), FontCyan);
		Pos = ShaderPrint(Pos, EquivalentResolution, FontCyan);
		AddNewLine(OriginalPos, Pos);

		Pos = ShaderPrintText(Pos, TEXT("MacroGroup Count           "), FontYellow);
		Pos = ShaderPrint(Pos, HairMacroGroupCount, FontYellow);
		AddNewLine(OriginalPos, Pos);
	}

	const float2 PixelPos = PixelCoord;
	if (PixelCoord.x < 0 || PixelCoord.y < 0 || PixelCoord.x >= MaxResolution.x || PixelCoord.y >= MaxResolution.y)
		return;

	ShaderPrintFilter(true);

	const float HairPixelCoverage = HairStrands.HairCoverageTexture.Load(uint3(PixelPos, 0));
	const bool bIsValid = HairPixelCoverage > 0;
	if (!bIsValid)
		return;

	const float ViewHairCount = HairCountTexture.Load(uint3(PixelPos, 0));
	const float ViewHairCountUint = HairCountUintTexture.Load(uint3(PixelPos, 0)) /  1000.f;

//	const float2 OriginalPos = PixelPos / float2(MaxResolution);
	const float2 OriginalPos = float2(50,500) / float2(MaxResolution);
	float2 Pos = OriginalPos;

	uint Total8BitCoverage = 0;
	const FNodeDesc NodeDesc = DecodeNodeDesc(HairStrands.HairSampleOffset.Load(uint3(PixelCoord, 0)));
	for (uint SampleIt0 = 0; SampleIt0 < NodeDesc.Count; SampleIt0++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt0;
		const FPackedHairSample NodeData = HairStrands.HairSampleData[LocalOffset];
		const FHairSample Sample = UnpackHairSample(NodeData);
		Total8BitCoverage += Sample.Coverage8bit;
	}

	// Pixel coord
	Pos = ShaderPrintText(Pos, TEXT("Pixel           "), FontTurquoise);
	Pos = ShaderPrint(Pos, PixelCoord, FontTurquoise);
	AddNewLine(OriginalPos, Pos);

	// Max sample
	Pos = ShaderPrintText(Pos, TEXT("Max Sample      "));
	Pos = ShaderPrint(Pos, HairStrands.MaxSamplePerPixelCount);
	AddNewLine(OriginalPos, Pos);

	// Unique sample
	Pos = ShaderPrintText(Pos, TEXT("Sample          "), FontOrange);
	Pos = ShaderPrint(Pos, NodeDesc.Count, FontOrange);
	AddNewLine(OriginalPos, Pos);

	// Accurate coverage (if coverage pass is activated)
	Pos = ShaderPrintText(Pos, TEXT("Hair Count      "));
	Pos = ShaderPrint(Pos, ViewHairCount);
	AddNewLine(OriginalPos, Pos);

	// Accurate coverage (if coverage pass is activated) uint
	Pos = ShaderPrintText(Pos, TEXT("Hair Count Uint "));
	Pos = ShaderPrint(Pos, ViewHairCountUint);
	AddNewLine(OriginalPos, Pos);
	
	// Accurate coverage (if coverage pass is activated)
	Pos = ShaderPrintText(Pos, TEXT("Coverage        "), FontOrange);
	Pos = ShaderPrint(Pos, HairPixelCoverage, FontOrange);
	AddNewLine(OriginalPos, Pos);

	// 8 bit Coverage (summed)
	Pos = ShaderPrintText(Pos, TEXT("Sum cov. 8bits  "));
	Pos = ShaderPrint(Pos, Total8BitCoverage);
	AddNewLine(OriginalPos, Pos);

	// Resolve type
	const uint Stencil = StencilTexture.Load(uint3(PixelPos,0)).y;
	const bool bIsFastResolve = (Stencil & FastResolveMask) != 0;
	Pos = ShaderPrintText(Pos, TEXT("Resolve         "));

	if (bIsFastResolve)
	{
		Pos = ShaderPrintText(Pos, TEXT("Fast"), FontEmerald);
	}
	else
	{
		Pos = ShaderPrintText(Pos, TEXT("Regular"), FontEmerald);
	}

	AddNewLine(OriginalPos, Pos);
	AddNewLine(OriginalPos, Pos);

	const float2 ColumnPos = Pos;

	// Sample Description
	{	
		Pos = ShaderPrintText(Pos, TEXT("Sample ID       "), FontWhite);	AddNewLine(OriginalPos, Pos);
	#if MATERIAL_DATA
		Pos = ShaderPrintText(Pos, TEXT(".Base Color R   "), FontRed);		AddNewLine(OriginalPos, Pos); 
		Pos = ShaderPrintText(Pos, TEXT(".Base Color G   "), FontGreen);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Base Color B   "), FontBlue);		AddNewLine(OriginalPos, Pos);
		AddNewLine(OriginalPos, Pos);

		Pos = ShaderPrintText(Pos, TEXT(".Tangent X      "), FontEmerald);	AddNewLine(OriginalPos, Pos); 
		Pos = ShaderPrintText(Pos, TEXT(".Tangent Y      "), FontEmerald);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Tangent Z      "), FontEmerald);	AddNewLine(OriginalPos, Pos);
		AddNewLine(OriginalPos, Pos);

		Pos = ShaderPrintText(Pos, TEXT(".Roughness      "), FontOrange);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Specular       "), FontEmerald);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Backlit        "), FontOrange);	AddNewLine(OriginalPos, Pos);
		AddNewLine(OriginalPos, Pos);
	#endif 													  
	#if DETAIL_DATA											  
		Pos = ShaderPrintText(Pos, TEXT(".Light Channels "), FontEmerald);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Scatter Scene  "), FontOrange);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Depth          "), FontEmerald);	AddNewLine(OriginalPos, Pos);
		AddNewLine(OriginalPos, Pos);

		Pos = ShaderPrintText(Pos, TEXT(".Macro Group ID "), FontYellow);	AddNewLine(OriginalPos, Pos);
		Pos = ShaderPrintText(Pos, TEXT(".Primitive		 "), FontEmerald);	AddNewLine(OriginalPos, Pos);
	#endif													  
		Pos = ShaderPrintText(Pos, TEXT(".Coverage       "), FontOrange);	AddNewLine(OriginalPos, Pos);
	}

	// Per sample description
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const FHairSample Sample = UnpackHairSample(HairStrands.HairSampleData[LocalOffset]);

		float2 StartSamplePos = ColumnPos + float2(150.f + 80.f * SampleIt, 0.f) / float2(MaxResolution);
		Pos = StartSamplePos;

		Pos = ShaderPrint(Pos, SampleIt, FontWhite);									AddNewLine(StartSamplePos, Pos);

	#if MATERIAL_DATA
		Pos = ShaderPrint(Pos, Sample.BaseColor.x,	FontRed);							AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.BaseColor.y,	FontGreen);							AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.BaseColor.z,	FontBlue);							AddNewLine(StartSamplePos, Pos);
		AddNewLine(StartSamplePos, Pos);

		Pos = ShaderPrint(Pos, Sample.Tangent.x,	FontEmerald);						AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.Tangent.y,	FontEmerald);						AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.Tangent.z,	FontEmerald);						AddNewLine(StartSamplePos, Pos);
		AddNewLine(StartSamplePos, Pos);

		Pos = ShaderPrint(Pos, Sample.Roughness,	FontOrange);						AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.Specular,		FontEmerald);						AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.Backlit,		FontOrange);						AddNewLine(StartSamplePos, Pos);
		AddNewLine(StartSamplePos, Pos);
	#endif 

	#if DETAIL_DATA
		Pos = ShaderPrint(Pos,(Sample.LightChannelMask & 0x1) ? 1u : 0u, FontEmerald);	AddNewLine(StartSamplePos, Pos);
//		Pos = ShaderPrint(Pos,(Sample.LightChannelMask & 0x1) ? 1u : 0u);				AddNewLine(StartSamplePos, Pos);
//		Pos = ShaderPrint(Pos,(Sample.LightChannelMask & 0x2) ? 1u : 0u);				AddNewLine(StartSamplePos, Pos);
//		Pos = ShaderPrint(Pos,(Sample.LightChannelMask & 0x4) ? 1u : 0u);				AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.bScatterSceneLighting ? 1u : 0u, FontOrange);		AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.Depth, FontEmerald);								AddNewLine(StartSamplePos, Pos);
		AddNewLine(StartSamplePos, Pos);

		Pos = ShaderPrint(Pos, Sample.MacroGroupId, FontYellow);						AddNewLine(StartSamplePos, Pos);
		Pos = ShaderPrint(Pos, Sample.PrimitiveId, FontEmerald);						AddNewLine(StartSamplePos, Pos);
	#endif
		Pos = ShaderPrint(Pos, Sample.Coverage8bit, FontOrange);						AddNewLine(StartSamplePos, Pos);
	}
}

#endif // SHADER_PRINT

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_PRINT_INSTANCE

int2					MaxResolution;
uint					InstanceCount;

Buffer<uint4>			Infos;

uint					NameInfoCount;
uint					NameCharacterCount;
StructuredBuffer<uint2> NameInfos;
Buffer<uint>			Names;
Buffer<int>				InstanceAABB;

struct FNameInfo
{
	uint PrimitiveID;
	uint Length;
	uint Offset;
	uint Pad0;
	uint Pad1;
};

FNameInfo UnpackDebugNameInfo(uint2 In)
{
	FNameInfo Out = (FNameInfo)0;
	Out.PrimitiveID = In.x;
	Out.Offset = (In.y) & 0xFFFF;
	Out.Length = (In.y >> 16) & 0xFF;

	return Out;
}

FNameInfo FindNameInfo(uint PrimitiveID)
{
	FNameInfo Out = (FNameInfo)0;
	Out.PrimitiveID = ~0;
	for (uint It = 0; It < NameInfoCount; ++It)
	{
		if (NameInfos[It].x == PrimitiveID)
		{
			return UnpackDebugNameInfo(NameInfos[It]);
		}
	}
	return Out;
}

float2 PrintInstanceName(float2 InPos, uint PrimitiveID, FFontColor InColor)
{
	const FNameInfo Info = FindNameInfo(PrimitiveID);
	if (Info.PrimitiveID != ~0 && (Info.Length + Info.Offset) <= NameCharacterCount)
	{
		for (uint It = 0; It < Info.Length; ++It)
		{
			const uint Char = Names[It + Info.Offset];
			InPos = ShaderPrintSymbol(InPos, Char, InColor);
		}
	}
	return InPos;
}

[numthreads(1, 1, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
#if PERMUTATION_OUTPUT_TYPE == 0
{
	// Draw AABB of the instance groups
	if (any(DispatchThreadId != 0))
	{
		return;
	}

	// Draw legend
	float2 OriginalPos = ShaderPrintGetPos(uint2(50, 50));
	float2 Pos = OriginalPos;


	// Draw totals
	const uint TotalGroup = InstanceCount;
	uint TotalStrandsCount = 0;
	uint TotalVertexCount = 0;
	for (uint InstanceIndex = 0; InstanceIndex < InstanceCount; ++InstanceIndex)
	{
		const uint4 InstanceData = Infos[InstanceIndex];
		TotalStrandsCount += InstanceData.z;
		TotalVertexCount += InstanceData.w;
	}

	Pos = ShaderPrintText(Pos, TEXT("Total Groups        : "), FontWhite);
	Pos = Print(Pos, TotalGroup, FontYellow, 8);
	AddNewLine(OriginalPos, Pos);

	Pos = ShaderPrintText(Pos, TEXT("Total Strand Curves : "), FontWhite);
	Pos = Print(Pos, TotalStrandsCount, FontOrange, 8);
	AddNewLine(OriginalPos, Pos);

	Pos = ShaderPrintText(Pos, TEXT("Total Strand Vertex : "), FontWhite);
	Pos = Print(Pos, TotalVertexCount, FontSilver, 8);
	AddNewLine(OriginalPos, Pos);

	AddNewLine(OriginalPos, Pos);

	// Draw instance details
	Pos = ShaderPrintText(Pos, TEXT("   Group  LOD     Geometry Binding Sim   RBF   Clip    Strands Vertex  Name"));
	AddNewLine(OriginalPos, Pos);

	for (uint InstanceIndex = 0; InstanceIndex < InstanceCount; ++InstanceIndex)
	{
		const uint4 InstanceData	= Infos[InstanceIndex];
		const uint GroupIndex		= (InstanceData.x>>0)  & 0xFF;
		const uint GroupCount		= (InstanceData.x>>8)  & 0xFF;
		const float LODCount		= (InstanceData.x>>16) & 0xFF;
		const uint GeometryType		= (InstanceData.x>>24) & 0x7;
		const uint BindingType		= (InstanceData.x>>27) & 0x7;
		const bool bHasSim			= (InstanceData.x>>30) & 0x1;
		const bool bHasRBF			= (InstanceData.x>>31) & 0x1;

		const float LOD				= f16tof32((InstanceData.y>>0)  & 0xFFFF);
		const float ClipValue		= f16tof32((InstanceData.y>>16) & 0xFFFF);

		const uint StrandsCount		= InstanceData.z;
		const uint VertexCount		= InstanceData.w;

		// Index
		Pos = Print(Pos, InstanceIndex, FontSilver, 2);
		Pos = ShaderPrintText(Pos, TEXT(" "));

		// Group
		Pos = Print(Pos, GroupIndex, FontYellow, 1);
		Pos = ShaderPrintText(Pos, TEXT("/"));
		Pos = Print(Pos, GroupCount, FontYellow, 1);
		Pos = ShaderPrintText(Pos, TEXT("    "));

		// LOD
		Pos = Print(Pos, LOD, FontYellow, 4, 2);	
		Pos = ShaderPrintText(Pos, TEXT("/"));
		Pos = Print(Pos, LODCount, FontYellow, 1);
		Pos = ShaderPrintText(Pos, TEXT("  "));

		// Geometry
		if (GeometryType == 0)		{ Pos = ShaderPrintText(Pos, TEXT("Strands "), FontEmerald); }
		else if (GeometryType == 1) { Pos = ShaderPrintText(Pos, TEXT("Cards   "), FontEmerald); }
		else if (GeometryType == 2) { Pos = ShaderPrintText(Pos, TEXT("Meshes  "), FontEmerald); }
		Pos = ShaderPrintText(Pos, TEXT(" "));

		// Binding
		if (BindingType == 0)		{ Pos = ShaderPrintText(Pos, TEXT("Skinned "), FontTurquoise); }
		else if (BindingType == 1)	{ Pos = ShaderPrintText(Pos, TEXT("Rigid   "), FontTurquoise); }
		else if (BindingType == 2)	{ Pos = ShaderPrintText(Pos, TEXT("None    "), FontTurquoise); }

		// Sim
		if (bHasSim)
			Pos = ShaderPrintText(Pos, TEXT("True "), FontGreen);
		else
			Pos = ShaderPrintText(Pos, TEXT("False"), FontRed);
		Pos = ShaderPrintText(Pos, TEXT(" "), FontWhite);

		// RBF
		if (bHasRBF)
			Pos = ShaderPrintText(Pos, TEXT("True "), FontGreen);
		else
			Pos = ShaderPrintText(Pos, TEXT("False"), FontRed);
		Pos = ShaderPrintText(Pos, TEXT(" "));

		// Clip
		if (ClipValue >= 0)
			Pos = Print(Pos, ClipValue, FontGreen, 7);
		else 
			Pos = Print(Pos, 0u, FontSilver, 7);
		Pos = ShaderPrintText(Pos, TEXT(" "));

		// Count
		Pos = Print(Pos, StrandsCount, FontOrange, 8);
		Pos = Print(Pos, VertexCount,  FontSilver, 8);

		// Name
		Pos = PrintInstanceName(Pos, InstanceIndex, FontWhite);

		AddNewLine(OriginalPos, Pos);
	}
}
#else  // PERMUTATION_OUTPUT_TYPE
{
	if (all(DispatchThreadId == 0))
	{
		const FHairAABB AABB = ReadHairAABB(0, InstanceAABB);
		AddAABBTWS(AABB.Min, AABB.Max, ColorDarkGreen);
	}
}
#endif // PERMUTATION_OUTPUT_TYPE

#endif // SHADER_PRINT_INSTANCE

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_TANGENT
uint TileSize;
int2 TileCount;
float2 OutputResolution;
RWTexture2D<float4> OutputTexture;

#define HAIR_TANGENT_INVALID 0
#define HAIR_TANGENT_STRANDS 1
#define HAIR_TANGENT_CARDS   2

struct FTangentDesc
{
	float3 Tangent;
	uint Type;
};

FTangentDesc AddTangentPlot(uint2 PixelCoord, float2 UV)
{
	FTangentDesc Out = (FTangentDesc)0;

	// Strands
	{
		// Find closest
		float3 Closest_Tangent = 0;
		float  Closest_Depth = 0;

		uint Total8BitCoverage = 0;
		const FNodeDesc NodeDesc = DecodeNodeDesc(HairStrands.HairSampleOffset.Load(uint3(PixelCoord, 0)));
		for (uint SampleIt0 = 0; SampleIt0 < NodeDesc.Count; SampleIt0++)
		{
			const uint LocalOffset = NodeDesc.Offset + SampleIt0;
			const FPackedHairSample NodeData = HairStrands.HairSampleData[LocalOffset];
			const FHairSample Sample = UnpackHairSample(NodeData);

			if (Sample.Depth > Closest_Depth)
			{
				Closest_Depth = Sample.Depth;
				Closest_Tangent = Sample.Tangent;
			}
		}

		// Draw tangent vector (strands)
		if (NodeDesc.Count > 0)
		{
			const float SceneDepth = ConvertFromDeviceZ(Closest_Depth);
			const float3 WorldPosition = ReconstructTranslatedWorldPositionFromDepth(UV, SceneDepth);
			AddLineTWS(WorldPosition, WorldPosition + Closest_Tangent, ColorRed, ColorYellow);
			Out.Type = 1;
			Out.Tangent = Closest_Tangent;
		}
	}

	// Cards
	if (Out.Type == 0)
	{
		FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
		const float SceneDepth = CalcSceneDepth(UV);
		const float3 WorldPosition = ReconstructTranslatedWorldPositionFromDepth(UV, SceneDepth);
		if (ScreenSpaceData.GBuffer.ShadingModelID == SHADINGMODELID_HAIR)
		{
			const float3 Tangent = ScreenSpaceData.GBuffer.WorldNormal;
			AddLineTWS(WorldPosition, WorldPosition + Tangent, ColorPurple, ColorYellow);
			Out.Type = 2;
			Out.Tangent = Tangent;
		}
	}

	return Out;
}

void AddTangentText(float2 UV, float3 Tangent, uint TangentType)
{
	const float2 OriginalPos = UV;
	float2 Pos = OriginalPos;
	if (TangentType == HAIR_TANGENT_STRANDS)
		Pos = ShaderPrintText(Pos, TEXT("Strands"), FontYellow);
	else if (TangentType == HAIR_TANGENT_CARDS)
		Pos = ShaderPrintText(Pos, TEXT("Cards "), FontYellow);
	else if (TangentType == HAIR_TANGENT_CARDS)
		Pos = ShaderPrintText(Pos, TEXT("Invalid"), FontRed);

	AddNewLine(OriginalPos, Pos);

	Pos = ShaderPrint(Pos, Tangent.x, FontRed);		AddNewLine(OriginalPos, Pos);
	Pos = ShaderPrint(Pos, Tangent.y, FontGreen);	AddNewLine(OriginalPos, Pos);
	Pos = ShaderPrint(Pos, Tangent.z, FontBlue);	AddNewLine(OriginalPos, Pos);
}

[numthreads(8, 8, 1)]
void MainCS(int2 DispatchThreadId : SV_DispatchThreadID)
{
	// Cursor plot
	if (all(DispatchThreadId == 0))
	{
		const float2 PixelCoord = GetCursorPos();// DispatchThreadId.xy + 0.5f;
		const float2 UV = PixelCoord / float2(OutputResolution);
		const float2 UVText = (PixelCoord + float2(20, 0)) / float2(OutputResolution);

		FTangentDesc Desc = AddTangentPlot(PixelCoord, UV);
		if (Desc.Type == HAIR_TANGENT_STRANDS)
		{			
			AddTangentText(UVText, Desc.Tangent, HAIR_TANGENT_STRANDS);
		}
		else if (Desc.Type == HAIR_TANGENT_CARDS)
		{
			AddTangentText(UVText, Desc.Tangent, HAIR_TANGENT_CARDS);
		}
	}

	// Grid plot
	if (all(DispatchThreadId.xy < TileCount))
	{
		const float2 PixelCoord = DispatchThreadId.xy * TileSize;
		if (all(PixelCoord < OutputResolution))
		{
			const float2 UV = PixelCoord / float2(OutputResolution);
			AddTangentPlot(PixelCoord, UV);
		}
	}
}
#endif // SHADER_TANGENT

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_LOD_INFO

int2 MaxResolution;
uint GroupIndex;
uint GeometryType;
float LOD;
float ScreenSize;
float3 GroupColor;

[numthreads(1, 1, 1)]
void MainCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	// Legend
	if (GroupIndex == 0)
	{
		float2 OriginalPos = float2(15, 50) / float2(MaxResolution);
		float2 Pos = OriginalPos;
		Pos = ShaderPrintText(Pos, TEXT("Group Geom.   LOD      Screen Size"), FontSilver); AddNewLine(OriginalPos, Pos);
	}

	// Values
	{
		float2 OriginalPos = float2(30, 50) / float2(MaxResolution);
		OriginalPos.y = float(65 + GroupIndex * 15) / float(MaxResolution.y);
		float2 Pos = OriginalPos;

		// Group Color
		Pos = ShaderPrintText(Pos, TEXT("* "), InitFontColor(GroupColor));

		// Group index
		ShaderPrint(Pos, GroupIndex, FontEmerald);
		Pos.x += 20.f / float(MaxResolution.x);

		// Geometry Type
		if (GeometryType == 0)
		{
			Pos = ShaderPrintText(Pos, TEXT("Strands "), FontOrange);
		}
		else if (GeometryType == 1)
		{
			Pos = ShaderPrintText(Pos, TEXT("Cards   "), FontOrange);
		}
		else if (GeometryType == 2)
		{
			Pos = ShaderPrintText(Pos, TEXT("Meshes  "), FontOrange);
		}

		// LOD
		ShaderPrint(Pos, LOD, FontWhite);
		Pos.x += 80.f / float(MaxResolution.x);

		// Screen size
		ShaderPrint(Pos, saturate(ScreenSize), FontWhite);
		Pos.x += 80.f / float(MaxResolution.x);

		AddNewLine(OriginalPos, Pos);
	}
}

#endif // SHADER_LOD_INFO